VERSION --use-function-keyword --global-cache 0.7

# INIT sets some configuration in the environment (to be used by rest of the functions later on).
# Arguments:
#   - cache_prefix: Overrides cache prefix for cache IDS. Its value is exported to the build environment under the entry: $EARTHLY_CARGO_CACHE_PREFIX (see below)
# This function sets the following entries in the calling environment:
#   - CARGO_HOME: Changed to point to an internal location in the mount cache
#   - PATH: Changed to include original $CARGO_HOME/bin
#   - EARTHLY_CARGO_CACHE_PREFIX: Value of the cache_prefix, by default ${EARTHLY_TARGET_PROJECT_NO_TAG}#${OS_RELEASE}#earthly-cargo-cache#${EARTHLY_GIT_BRANCH}
#   - CARGO_INSTALL_ROOT: Changed to point to the original $CARGO_HOME
#   - EARTHLY_RUST_CARGO_HOME_CACHE: Cache mount definition for the $CARGO_HOME
#   - EARTHLY_RUST_TARGET_CACHE: Cache mount definition for ./target folder

INIT:
    FUNCTION
    RUN if [ -n "$EARTHLY_CARGO_CACHE_PREFIX" ]; then \
      echo "+INIT has already been called in this build environment" ; \
      exit 1; \
    fi
    IF [ "$CARGO_HOME" = "" ]
        ENV CARGO_HOME="$HOME/.cargo"
    END

    # Add current cargo home binaries folder to the path
    IF ! echo $PATH | grep -E -q "(^|:)$CARGO_HOME/bin($|:)"
        ENV PATH="$PATH:$CARGO_HOME/bin"
    END
    #https://docs.earthly.dev/docs/earthfile/builtin-args
    ARG EARTHLY_GIT_BRANCH
    ARG EARTHLY_TARGET_PROJECT_NO_TAG

    ARG OS_RELEASE=$(md5sum /etc/os-release | cut -d ' ' -f 1)
    ARG cache_prefix="${EARTHLY_TARGET_PROJECT_NO_TAG}#${OS_RELEASE}#earthly-cargo-cache#${EARTHLY_GIT_BRANCH}"
    ENV EARTHLY_CARGO_CACHE_PREFIX=$cache_prefix

    # The following entry will make crates installed through this function reside in the original cargo home, and not in the cargo home within the mount cache.
    # This way, if BK garbage-collects them, the build won't be broken.
    ENV CARGO_INSTALL_ROOT=$CARGO_HOME

    # We now change $CARGO_HOME while keeping the original $CARGO_HOME/bin directory in the path. This way, the cargo binaries are still accessible and the whole $CARGO_HOME is within the global cache
    # ($CARGO_HOME/.package-cache has to be in the cache so Cargo can properly synchronize parallel access to $CARGO_HOME resources).
    ENV CARGO_HOME="/tmp/earthly/.cargo"

    # Set Cargo caches
    ENV EARTHLY_RUST_CARGO_HOME_CACHE="type=cache,mode=0777,id=$EARTHLY_CARGO_CACHE_PREFIX#cargo-home,sharing=shared,target=$CARGO_HOME"
    ENV EARTHLY_RUST_TARGET_CACHE="type=cache,mode=0777,id=${EARTHLY_CARGO_CACHE_PREFIX}#target,sharing=shared,target=target"

# CARGO runs the cargo command "cargo $args".
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - args: Cargo subcommand and its arguments. Required.
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
#     Use this argument when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
#     For example --output="release/[^\./]+" would keep all the files in /target/release that don't have any extension.
CARGO:
    FUNCTION
    DO +CHECK_INITED
    ARG --required args
    ARG output
    RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
      set -e; \
      cargo $args;
    IF [ "$output" != "" ]
      DO +COPY_OUTPUT --output=$output
    END

# COPY_OUTPUT copies files out of the target cache into the image layers.
# Use this function when you want to SAVE an ARTIFACT from the target folder (mounted cache), always trying to minimize the total size of the copied fileset.
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - output: Regex matching output artifacts files to be copied to ./target folder in the caller filesystem (image layers).
# Example:
#   DO rust+INIT
#   RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE cargo build --release
#   DO rust+COPY_OUTPUT --output="release/[^\./]+" # Keep all the files in /target/release that don't have any extension.
COPY_OUTPUT:
    FUNCTION
    DO +CHECK_INITED
    ARG --required output
    ARG TMP_FOLDER="/tmp/earthly/lib/rust"
    RUN  if [ ! -n "$EARTHLY_RUST_TARGET_CACHE" ]; then \
      echo "+SET_CACHE_MOUNTS_ENV has not been called yet in this build environment" ; \
      exit 1; \
    fi;
    RUN --mount=$EARTHLY_RUST_TARGET_CACHE \
        if [ -n "$output" ]; then  \
            echo "Copying output files" ;  \
            mkdir -p $TMP_FOLDER;  \
            cd target;  \
            find . -type f -regextype posix-egrep -regex "./$output" -exec cp --parents {} $TMP_FOLDER \; ;  \
            cd ..;  \
        fi;
    RUN mkdir -p target; \
        mv $TMP_FOLDER/* target 2>/dev/null || echo "no files found within ./target matching the provided output regexp" ;

# SWEEP runs cargo-sweep to clean build artifacts that haven't been accessed for a number of days.
# Notice that in order to run this function, +INIT must be called first.
# Arguments:
#   - days: Number of days. Default value: 4
SWEEP:
    FUNCTION
    DO +CHECK_INITED
    ARG days=4
    RUN --mount=$EARTHLY_RUST_CARGO_HOME_CACHE --mount=$EARTHLY_RUST_TARGET_CACHE \
        set -e; \
        if [ ! -f $CARGO_HOME/bin/cargo-sweep ]; then \
          echo "Installing cargo sweep" ; \
          cargo install cargo-sweep --root $CARGO_HOME; \
        fi; \
        cargo sweep -r -t $days; \
        cargo sweep -r -i;

CHECK_INITED:
    FUNCTION
    RUN  if [ ! -n "$EARTHLY_CARGO_CACHE_PREFIX" ]; then \
          echo "+INIT has not been called yet in this build environment" ; \
          exit 1; \
        fi;

